plugins {
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'java'
}

allprojects {
  apply plugin: 'idea'
  apply plugin: 'java-library'
  apply plugin: 'io.spring.dependency-management'

  apply from: rootProject.file('versions.gradle')

  dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE")
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = 11
    targetCompatibility = 11
    options.encoding = 'UTF-8'
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    implementation group: 'org.jetbrains', name: 'annotations', version: versions['jetbrains']

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }

  all {
    implementation {
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation {
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
  }
}

dependencies {
  implementation project(':api')
  implementation project(':dal')

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions['openapi']
  implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: versions['apache-httpcore']

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions['openfeign-starter']

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

test {
  useJUnitPlatform()
}

bootBuildImage {
  imageName = "iamhostage/${project.name}:${project.version}"
}

task bootPushImage {
  group = 'build'
  description = 'Pushes an OCI image of the application using the output of bootBuildImage task'
  dependsOn bootBuildImage

  doLast {
    exec {
      executable 'docker'
      args 'push', "docker.io/${bootBuildImage.imageName}"
    }
  }
}
